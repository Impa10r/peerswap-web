// Code generated by go-swagger; DO NOT EDIT.

package peer_swap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"peerswap-web/models"
)

// PeerSwapAllowSwapRequestsReader is a Reader for the PeerSwapAllowSwapRequests structure.
type PeerSwapAllowSwapRequestsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PeerSwapAllowSwapRequestsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPeerSwapAllowSwapRequestsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewPeerSwapAllowSwapRequestsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPeerSwapAllowSwapRequestsOK creates a PeerSwapAllowSwapRequestsOK with default headers values
func NewPeerSwapAllowSwapRequestsOK() *PeerSwapAllowSwapRequestsOK {
	return &PeerSwapAllowSwapRequestsOK{}
}

/*
PeerSwapAllowSwapRequestsOK describes a response with status code 200, with default header values.

A successful response.
*/
type PeerSwapAllowSwapRequestsOK struct {
	Payload *models.PeerswapPolicy
}

// IsSuccess returns true when this peer swap allow swap requests o k response has a 2xx status code
func (o *PeerSwapAllowSwapRequestsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this peer swap allow swap requests o k response has a 3xx status code
func (o *PeerSwapAllowSwapRequestsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this peer swap allow swap requests o k response has a 4xx status code
func (o *PeerSwapAllowSwapRequestsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this peer swap allow swap requests o k response has a 5xx status code
func (o *PeerSwapAllowSwapRequestsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this peer swap allow swap requests o k response a status code equal to that given
func (o *PeerSwapAllowSwapRequestsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the peer swap allow swap requests o k response
func (o *PeerSwapAllowSwapRequestsOK) Code() int {
	return 200
}

func (o *PeerSwapAllowSwapRequestsOK) Error() string {
	return fmt.Sprintf("[POST /v1/swaps/allowrequests][%d] peerSwapAllowSwapRequestsOK  %+v", 200, o.Payload)
}

func (o *PeerSwapAllowSwapRequestsOK) String() string {
	return fmt.Sprintf("[POST /v1/swaps/allowrequests][%d] peerSwapAllowSwapRequestsOK  %+v", 200, o.Payload)
}

func (o *PeerSwapAllowSwapRequestsOK) GetPayload() *models.PeerswapPolicy {
	return o.Payload
}

func (o *PeerSwapAllowSwapRequestsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PeerswapPolicy)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPeerSwapAllowSwapRequestsDefault creates a PeerSwapAllowSwapRequestsDefault with default headers values
func NewPeerSwapAllowSwapRequestsDefault(code int) *PeerSwapAllowSwapRequestsDefault {
	return &PeerSwapAllowSwapRequestsDefault{
		_statusCode: code,
	}
}

/*
PeerSwapAllowSwapRequestsDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type PeerSwapAllowSwapRequestsDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this peer swap allow swap requests default response has a 2xx status code
func (o *PeerSwapAllowSwapRequestsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this peer swap allow swap requests default response has a 3xx status code
func (o *PeerSwapAllowSwapRequestsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this peer swap allow swap requests default response has a 4xx status code
func (o *PeerSwapAllowSwapRequestsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this peer swap allow swap requests default response has a 5xx status code
func (o *PeerSwapAllowSwapRequestsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this peer swap allow swap requests default response a status code equal to that given
func (o *PeerSwapAllowSwapRequestsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the peer swap allow swap requests default response
func (o *PeerSwapAllowSwapRequestsDefault) Code() int {
	return o._statusCode
}

func (o *PeerSwapAllowSwapRequestsDefault) Error() string {
	return fmt.Sprintf("[POST /v1/swaps/allowrequests][%d] PeerSwap_AllowSwapRequests default  %+v", o._statusCode, o.Payload)
}

func (o *PeerSwapAllowSwapRequestsDefault) String() string {
	return fmt.Sprintf("[POST /v1/swaps/allowrequests][%d] PeerSwap_AllowSwapRequests default  %+v", o._statusCode, o.Payload)
}

func (o *PeerSwapAllowSwapRequestsDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *PeerSwapAllowSwapRequestsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
