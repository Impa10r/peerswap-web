// Code generated by go-swagger; DO NOT EDIT.

package peer_swap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"peerswap-web/models"
)

// PeerSwapStopReader is a Reader for the PeerSwapStop structure.
type PeerSwapStopReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PeerSwapStopReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPeerSwapStopOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewPeerSwapStopDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPeerSwapStopOK creates a PeerSwapStopOK with default headers values
func NewPeerSwapStopOK() *PeerSwapStopOK {
	return &PeerSwapStopOK{}
}

/*
PeerSwapStopOK describes a response with status code 200, with default header values.

A successful response.
*/
type PeerSwapStopOK struct {
	Payload models.PeerswapEmpty
}

// IsSuccess returns true when this peer swap stop o k response has a 2xx status code
func (o *PeerSwapStopOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this peer swap stop o k response has a 3xx status code
func (o *PeerSwapStopOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this peer swap stop o k response has a 4xx status code
func (o *PeerSwapStopOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this peer swap stop o k response has a 5xx status code
func (o *PeerSwapStopOK) IsServerError() bool {
	return false
}

// IsCode returns true when this peer swap stop o k response a status code equal to that given
func (o *PeerSwapStopOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the peer swap stop o k response
func (o *PeerSwapStopOK) Code() int {
	return 200
}

func (o *PeerSwapStopOK) Error() string {
	return fmt.Sprintf("[POST /v1/stop][%d] peerSwapStopOK  %+v", 200, o.Payload)
}

func (o *PeerSwapStopOK) String() string {
	return fmt.Sprintf("[POST /v1/stop][%d] peerSwapStopOK  %+v", 200, o.Payload)
}

func (o *PeerSwapStopOK) GetPayload() models.PeerswapEmpty {
	return o.Payload
}

func (o *PeerSwapStopOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPeerSwapStopDefault creates a PeerSwapStopDefault with default headers values
func NewPeerSwapStopDefault(code int) *PeerSwapStopDefault {
	return &PeerSwapStopDefault{
		_statusCode: code,
	}
}

/*
PeerSwapStopDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type PeerSwapStopDefault struct {
	_statusCode int

	Payload *models.RPCStatus
}

// IsSuccess returns true when this peer swap stop default response has a 2xx status code
func (o *PeerSwapStopDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this peer swap stop default response has a 3xx status code
func (o *PeerSwapStopDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this peer swap stop default response has a 4xx status code
func (o *PeerSwapStopDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this peer swap stop default response has a 5xx status code
func (o *PeerSwapStopDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this peer swap stop default response a status code equal to that given
func (o *PeerSwapStopDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the peer swap stop default response
func (o *PeerSwapStopDefault) Code() int {
	return o._statusCode
}

func (o *PeerSwapStopDefault) Error() string {
	return fmt.Sprintf("[POST /v1/stop][%d] PeerSwap_Stop default  %+v", o._statusCode, o.Payload)
}

func (o *PeerSwapStopDefault) String() string {
	return fmt.Sprintf("[POST /v1/stop][%d] PeerSwap_Stop default  %+v", o._statusCode, o.Payload)
}

func (o *PeerSwapStopDefault) GetPayload() *models.RPCStatus {
	return o.Payload
}

func (o *PeerSwapStopDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.RPCStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
