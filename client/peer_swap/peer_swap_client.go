// Code generated by go-swagger; DO NOT EDIT.

package peer_swap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new peer swap API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for peer swap API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	PeerSwapAddPeer(params *PeerSwapAddPeerParams, opts ...ClientOption) (*PeerSwapAddPeerOK, error)

	PeerSwapAddSusPeer(params *PeerSwapAddSusPeerParams, opts ...ClientOption) (*PeerSwapAddSusPeerOK, error)

	PeerSwapAllowSwapRequests(params *PeerSwapAllowSwapRequestsParams, opts ...ClientOption) (*PeerSwapAllowSwapRequestsOK, error)

	PeerSwapGetSwap(params *PeerSwapGetSwapParams, opts ...ClientOption) (*PeerSwapGetSwapOK, error)

	PeerSwapLiquidGetAddress(params *PeerSwapLiquidGetAddressParams, opts ...ClientOption) (*PeerSwapLiquidGetAddressOK, error)

	PeerSwapLiquidGetBalance(params *PeerSwapLiquidGetBalanceParams, opts ...ClientOption) (*PeerSwapLiquidGetBalanceOK, error)

	PeerSwapLiquidSendToAddress(params *PeerSwapLiquidSendToAddressParams, opts ...ClientOption) (*PeerSwapLiquidSendToAddressOK, error)

	PeerSwapListActiveSwaps(params *PeerSwapListActiveSwapsParams, opts ...ClientOption) (*PeerSwapListActiveSwapsOK, error)

	PeerSwapListPeers(params *PeerSwapListPeersParams, opts ...ClientOption) (*PeerSwapListPeersOK, error)

	PeerSwapListRequestedSwaps(params *PeerSwapListRequestedSwapsParams, opts ...ClientOption) (*PeerSwapListRequestedSwapsOK, error)

	PeerSwapListSwaps(params *PeerSwapListSwapsParams, opts ...ClientOption) (*PeerSwapListSwapsOK, error)

	PeerSwapReloadPolicyFile(params *PeerSwapReloadPolicyFileParams, opts ...ClientOption) (*PeerSwapReloadPolicyFileOK, error)

	PeerSwapRemovePeer(params *PeerSwapRemovePeerParams, opts ...ClientOption) (*PeerSwapRemovePeerOK, error)

	PeerSwapRemoveSusPeer(params *PeerSwapRemoveSusPeerParams, opts ...ClientOption) (*PeerSwapRemoveSusPeerOK, error)

	PeerSwapStop(params *PeerSwapStopParams, opts ...ClientOption) (*PeerSwapStopOK, error)

	PeerSwapSwapIn(params *PeerSwapSwapInParams, opts ...ClientOption) (*PeerSwapSwapInOK, error)

	PeerSwapSwapOut(params *PeerSwapSwapOutParams, opts ...ClientOption) (*PeerSwapSwapOutOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
PeerSwapAddPeer peer swap add peer API
*/
func (a *Client) PeerSwapAddPeer(params *PeerSwapAddPeerParams, opts ...ClientOption) (*PeerSwapAddPeerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeerSwapAddPeerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PeerSwap_AddPeer",
		Method:             "POST",
		PathPattern:        "/v1/policy/peer/add",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PeerSwapAddPeerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeerSwapAddPeerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PeerSwapAddPeerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PeerSwapAddSusPeer peer swap add sus peer API
*/
func (a *Client) PeerSwapAddSusPeer(params *PeerSwapAddSusPeerParams, opts ...ClientOption) (*PeerSwapAddSusPeerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeerSwapAddSusPeerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PeerSwap_AddSusPeer",
		Method:             "POST",
		PathPattern:        "/v1/policy/peer/addsus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PeerSwapAddSusPeerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeerSwapAddSusPeerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PeerSwapAddSusPeerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PeerSwapAllowSwapRequests policies
*/
func (a *Client) PeerSwapAllowSwapRequests(params *PeerSwapAllowSwapRequestsParams, opts ...ClientOption) (*PeerSwapAllowSwapRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeerSwapAllowSwapRequestsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PeerSwap_AllowSwapRequests",
		Method:             "POST",
		PathPattern:        "/v1/swaps/allowrequests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PeerSwapAllowSwapRequestsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeerSwapAllowSwapRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PeerSwapAllowSwapRequestsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PeerSwapGetSwap peer swap get swap API
*/
func (a *Client) PeerSwapGetSwap(params *PeerSwapGetSwapParams, opts ...ClientOption) (*PeerSwapGetSwapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeerSwapGetSwapParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PeerSwap_GetSwap",
		Method:             "GET",
		PathPattern:        "/v1/swaps/{swapId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PeerSwapGetSwapReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeerSwapGetSwapOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PeerSwapGetSwapDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PeerSwapLiquidGetAddress liquids stuff
*/
func (a *Client) PeerSwapLiquidGetAddress(params *PeerSwapLiquidGetAddressParams, opts ...ClientOption) (*PeerSwapLiquidGetAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeerSwapLiquidGetAddressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PeerSwap_LiquidGetAddress",
		Method:             "GET",
		PathPattern:        "/v1/liquid/address",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PeerSwapLiquidGetAddressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeerSwapLiquidGetAddressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PeerSwapLiquidGetAddressDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PeerSwapLiquidGetBalance peer swap liquid get balance API
*/
func (a *Client) PeerSwapLiquidGetBalance(params *PeerSwapLiquidGetBalanceParams, opts ...ClientOption) (*PeerSwapLiquidGetBalanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeerSwapLiquidGetBalanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PeerSwap_LiquidGetBalance",
		Method:             "GET",
		PathPattern:        "/v1/liquid/balance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PeerSwapLiquidGetBalanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeerSwapLiquidGetBalanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PeerSwapLiquidGetBalanceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PeerSwapLiquidSendToAddress peer swap liquid send to address API
*/
func (a *Client) PeerSwapLiquidSendToAddress(params *PeerSwapLiquidSendToAddressParams, opts ...ClientOption) (*PeerSwapLiquidSendToAddressOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeerSwapLiquidSendToAddressParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PeerSwap_LiquidSendToAddress",
		Method:             "POST",
		PathPattern:        "/v1/liquid/send",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PeerSwapLiquidSendToAddressReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeerSwapLiquidSendToAddressOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PeerSwapLiquidSendToAddressDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PeerSwapListActiveSwaps peer swap list active swaps API
*/
func (a *Client) PeerSwapListActiveSwaps(params *PeerSwapListActiveSwapsParams, opts ...ClientOption) (*PeerSwapListActiveSwapsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeerSwapListActiveSwapsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PeerSwap_ListActiveSwaps",
		Method:             "GET",
		PathPattern:        "/v1/swaps/active",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PeerSwapListActiveSwapsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeerSwapListActiveSwapsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PeerSwapListActiveSwapsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PeerSwapListPeers peer swap list peers API
*/
func (a *Client) PeerSwapListPeers(params *PeerSwapListPeersParams, opts ...ClientOption) (*PeerSwapListPeersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeerSwapListPeersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PeerSwap_ListPeers",
		Method:             "GET",
		PathPattern:        "/v1/peers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PeerSwapListPeersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeerSwapListPeersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PeerSwapListPeersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PeerSwapListRequestedSwaps peer swap list requested swaps API
*/
func (a *Client) PeerSwapListRequestedSwaps(params *PeerSwapListRequestedSwapsParams, opts ...ClientOption) (*PeerSwapListRequestedSwapsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeerSwapListRequestedSwapsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PeerSwap_ListRequestedSwaps",
		Method:             "GET",
		PathPattern:        "/v1/swaps/requests",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PeerSwapListRequestedSwapsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeerSwapListRequestedSwapsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PeerSwapListRequestedSwapsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PeerSwapListSwaps peer swap list swaps API
*/
func (a *Client) PeerSwapListSwaps(params *PeerSwapListSwapsParams, opts ...ClientOption) (*PeerSwapListSwapsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeerSwapListSwapsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PeerSwap_ListSwaps",
		Method:             "GET",
		PathPattern:        "/v1/swaps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PeerSwapListSwapsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeerSwapListSwapsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PeerSwapListSwapsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PeerSwapReloadPolicyFile peer swap reload policy file API
*/
func (a *Client) PeerSwapReloadPolicyFile(params *PeerSwapReloadPolicyFileParams, opts ...ClientOption) (*PeerSwapReloadPolicyFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeerSwapReloadPolicyFileParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PeerSwap_ReloadPolicyFile",
		Method:             "GET",
		PathPattern:        "/v1/policy/reload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PeerSwapReloadPolicyFileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeerSwapReloadPolicyFileOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PeerSwapReloadPolicyFileDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PeerSwapRemovePeer peer swap remove peer API
*/
func (a *Client) PeerSwapRemovePeer(params *PeerSwapRemovePeerParams, opts ...ClientOption) (*PeerSwapRemovePeerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeerSwapRemovePeerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PeerSwap_RemovePeer",
		Method:             "POST",
		PathPattern:        "/v1/policy/peer/remove",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PeerSwapRemovePeerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeerSwapRemovePeerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PeerSwapRemovePeerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PeerSwapRemoveSusPeer peer swap remove sus peer API
*/
func (a *Client) PeerSwapRemoveSusPeer(params *PeerSwapRemoveSusPeerParams, opts ...ClientOption) (*PeerSwapRemoveSusPeerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeerSwapRemoveSusPeerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PeerSwap_RemoveSusPeer",
		Method:             "POST",
		PathPattern:        "/v1/policy/peer/removesus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PeerSwapRemoveSusPeerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeerSwapRemoveSusPeerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PeerSwapRemoveSusPeerDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PeerSwapStop peer swap stop API
*/
func (a *Client) PeerSwapStop(params *PeerSwapStopParams, opts ...ClientOption) (*PeerSwapStopOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeerSwapStopParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PeerSwap_Stop",
		Method:             "POST",
		PathPattern:        "/v1/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PeerSwapStopReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeerSwapStopOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PeerSwapStopDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PeerSwapSwapIn peer swap swap in API
*/
func (a *Client) PeerSwapSwapIn(params *PeerSwapSwapInParams, opts ...ClientOption) (*PeerSwapSwapInOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeerSwapSwapInParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PeerSwap_SwapIn",
		Method:             "POST",
		PathPattern:        "/v1/swaps/swapin",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PeerSwapSwapInReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeerSwapSwapInOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PeerSwapSwapInDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PeerSwapSwapOut peer swap swap out API
*/
func (a *Client) PeerSwapSwapOut(params *PeerSwapSwapOutParams, opts ...ClientOption) (*PeerSwapSwapOutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPeerSwapSwapOutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PeerSwap_SwapOut",
		Method:             "POST",
		PathPattern:        "/v1/swaps/swapout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PeerSwapSwapOutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PeerSwapSwapOutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PeerSwapSwapOutDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
