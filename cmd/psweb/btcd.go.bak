package main

import (
	"fmt"
	"log"

	"github.com/btcsuite/btcd/chaincfg/chainhash"
	"github.com/btcsuite/btcd/rpcclient"
)

func btcdConnect() *rpcclient.Client {
	// Connect to Bitcoin Core RPC server
	host := getLndConfSetting("bitcoind.rpchost")
	user := getLndConfSetting("bitcoind.rpcuser")
	passwd := getLndConfSetting("bitcoind.rpcpass")

	port := "8332"
	if getLndConfSetting("bitcoin.testnet") == "true" {
		port = "18332"
	}

	connCfg := &rpcclient.ConnConfig{
		Host:         fmt.Sprintf("%s:%s", host, port),
		User:         user,
		Pass:         passwd,
		HTTPPostMode: true,
		DisableTLS:   true,
	}

	client, err := rpcclient.New(connCfg, nil)
	if err != nil {
		log.Printf("Failed to create rpc client: %v", err)
		return nil
	}

	return client
}

func btcdGetRawTransactionHex(txid string) string {

	client := btcdConnect()
	if client == nil {
		return ""
	}
	defer client.Shutdown()

	// Convert the string txID to *chainhash.Hash type
	hash, err := chainhash.NewHashFromStr(txid)
	if err != nil {
		log.Printf("Failed to parse transaction ID: %v", err)
	}
	// Call getrawtransaction RPC method
	rawTx, err := client.GetRawTransactionVerbose(hash)
	if err != nil {
		log.Printf("Failed to retrieve raw transaction: %v", err)
	}

	return rawTx.Hex
}

func btcdGetTxOutProof(txid string) string {

	client := btcdConnect()
	if client == nil {
		return ""
	}
	defer client.Shutdown()

	// Call raw RPC method gettxoutproof
	var proofHex string
	err := client.Call(&proofHex, "gettxoutproof", []interface{}{[]string{txID}})
	if err != nil {
		log.Fatalf("Failed to retrieve transaction proof: %v", err)
	}

	return proofHex
}
