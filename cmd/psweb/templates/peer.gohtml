{{define "peer"}}
  {{template "header" .}}
    <div class="container">
      <div class="columns">
        <div class="column">
          {{if .PeerSwapPeer}}
            <div class="box">
              <div class="columns">
                <div class="column">
                  <h4 class="title is-4"><span style="color: #FF9900; font-weight: bold;">‚Çø</span>&nbsp<a href="/bitcoin">Bitcoin:</a>&nbsp{{fmt .BitcoinBalance}}</h4>
                </div>
                <div class="column">
                  <h4 class="title is-4">üåä&nbsp<a href="/liquid">Liquid:</a>&nbsp{{fmt .LiquidBalance}}</h4>
                </div>
              </div>
            </div>
          {{end}}
          <div class="box">
            {{if .PeerSwapPeer}}         
              {{if not .Peer.Channels}}
                <p>üôÅ There are no channels with {{.PeerAlias}}.</p>
              {{else}}
                {{if not .Peer.SwapsAllowed}}
                  <p>‚õî {{.PeerAlias}} did not whitelist your node. Please contact them to do it.</p>
                {{else}}
                  {{if ne .ActiveSwaps ""}}
                    <h4 class="title is-4">Pending Swaps</h4>
                    {{.ActiveSwaps}}
                    <script>
                      // Reload the page every minute (60000 milliseconds)
                      setInterval(function(){
                          location.reload();
                      }, 60000);
                    </script>
                  {{else }}
                    <h4 class="title is-4">New Swap</h4> 
                    <form action="/submit" method="post">
                      <div class="field is-horizontal">
                        <div class="field-label is-normal">
                          <label class="label">Channel</label>
                        </div>
                        <div class="field-body">
                          <div class="field">
                            <div class="control">
                              <div class="select is-medium is-fullwidth">
                                <select name="channelId">
                                {{range .Peer.Channels}}
                                  <option value="{{.ChannelId}}">L {{fmt .LocalBalance}} - {{fmt .RemoteBalance}} R</option>
                                {{end}}
                                </select>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div class="field is-horizontal">
                        <div class="field-label is-normal">
                          <label class="label">Direction</label>
                        </div>
                        <div class="field-body">
                          <div class="field">
                            <div class="control">
                              <div class="select is-medium is-fullwidth">
                                <select id="direction" name="direction" onchange="calculateTransactionFee()">
                                  <option value="swapIn" {{if .DirectionIn}}selected{{end}}>Swap In ‚á® ‚ö°</option>
                                  <option value="swapOut" {{if not .DirectionIn}}selected{{end}}>Swap Out ‚ö° ‚á® </option>
                                </select>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div class="field is-horizontal">
                        <div class="field-label is-normal">
                          <label class="label">Asset</label>
                        </div>
                        <div class="field-body">
                          <div class="field">
                            <div class="control">
                              <div class="select is-medium is-fullwidth">
                                <select id="asset" name="asset" onchange="calculateTransactionFee()">
                                  <option value="lbtc" {{if not .LBTC}}disabled{{end}}>Liquid üåä</option>
                                  <option value="btc" {{if not .BTC}}disabled{{end}}>Bitcoin ‚Çø</option>
                                </select>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div class="field is-horizontal">
                        <div class="field-label is-normal">
                          <label class="label">Amount</label>
                        </div>
                        <div class="field-body">
                          <div class="field">
                            <p>
                              <input class="input is-medium" type="number" id="swapAmount" name="swapAmount" oninput="delayedCalculateTransactionFee()" required min="100000" placeholder="‚ö° Swap Amount (sats)">
                            </p>
                          </div>
                        </div>
                      </div>
                      <div class="field is-horizontal">
                        <div class="field-label is-normal">
                          <label id="resultLabel" class="label">Fee Estimate</label>
                        </div>
                        <div class="field-body">
                          <label id="result" class="label">Please enter the Swap Amount</label>
                        </div>
                      </div>
                      <center>
                        <table id="utxoTableBTC" style="display: none; width:100%; table-layout:fixed;">
                          {{range .OutputsBTC}}
                            <tr>
                              <td id="utxoAddressBTC">{{.Address}}</td>
                              <td id="utxoAmountBTC">{{.AmountSat}}</td>
                            </tr>
                          {{end}}
                        </table>
                        <table id="utxoTableLBTC" style="display: none; width:100%; table-layout:fixed;">
                          {{range .OutputsLBTC}}
                            <tr>
                              <td id="utxoAmountLBTC">{{.Amount}}</td>
                            </tr>
                          {{end}}
                        </table>
                        <input type="hidden" name="action" value="doSwap">
                        <input type="hidden" name="nodeId" value="{{.Peer.NodeId}}">
                        <input class="button is-large" type="submit" value="Execute Swap">
                      </center>
                    </form>
                    <script>
                      // Function to format number with thousand separators
                      function formatWithThousandSeparators(number) {
                          return number.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                      }
                      
                      function calculateTransactionFee() {
                        var asset = document.getElementById("asset").value;
                        var swapAmount = Number(document.getElementById("swapAmount").value);
                        let fee = 0;
                        let feeRate = {{.MempoolFeeRate}}; // LBTC
                        let title = ""; 
                        let change = 25000;

                        if (asset == "btc") {
                          feeRate = {{.BtcFeeRate}};
                          document.getElementById("mempoolFeeRate").textContent = "{{.BtcFeeRate}} sats/vB"
                        } else {
                          // Liquid
                          document.getElementById("mempoolFeeRate").textContent = "{{.MempoolFeeRate}} sats/vB"
                        }   

                        // amount cannot be blank
                        if (swapAmount < 100000) {
                          document.getElementById('result').innerText = "Please enter the Swap Amount";
                          return;
                        }
                        
                        if (document.getElementById("direction").value == "swapIn") {
                          title = "Assumed UTXOs:\n";
                          if (asset == "btc") {
                            // Check amount
                            const maxAmount = {{.BitcoinBalance}} - {{.ReserveBTC}};
                            if (swapAmount > maxAmount) {
                              document.getElementById('result').innerText = "Swap-in amount cannot exceed " + formatWithThousandSeparators(maxAmount);
                              return;
                            }

                            // Initialize total UTXO amount and UTXO counters
                            let totalUtxoAmount = 0;
                            let inputsP2TR = 0; // Number of P2TR inputs
                            let inputsP2WPKH = 0; // Number of P2WPKH inputs
                            
                            // Get all table rows and convert NodeList to an array
                            let tableArray = Array.from(document.querySelectorAll("#utxoTableBTC tr"));  

                            // Sort the array of table rows based on UTXO amount from high to low
                            tableArray.sort((a, b) => {
                                let amountA = parseFloat(a.querySelector("#utxoAmountBTC").textContent);
                                let amountB = parseFloat(b.querySelector("#utxoAmountBTC").textContent);
                                return amountB - amountA;
                            });

                            // total amount to allocate among UTXOs 
                            let amountToAllocate = swapAmount;
                            
                            // Iterate through table rows
                            tableArray.forEach(function(row) {
                              // Check if allocation is not finished
                              if (amountToAllocate >= 0) {
                                  // Reduce unallocated amount by UTXO size
                                  const utxoAmount = parseFloat(row.querySelector("#utxoAmountBTC").textContent);
                                  amountToAllocate -= utxoAmount;

                                  // identify P2TR vs P2WPKH address
                                  const address = row.querySelector("#utxoAddressBTC").textContent
                                  if (address.startsWith('bc1p') || address.startsWith('tb1p')) {
                                    // Increment P2TR UTXO count
                                    inputsP2TR++;
                                  } else {
                                    // Increment P2WPKH UTXO count
                                    inputsP2WPKH++;
                                  }
                                  title += "#" + formatWithThousandSeparators(inputsP2WPKH+inputsP2TR) + ": " + formatWithThousandSeparators(utxoAmount) + "\n";
                              }
                            });

                            // calc fee
                            let baseSize = 41 * (inputsP2TR + inputsP2WPKH);
                            let totalSize = 41 * (inputsP2TR + inputsP2WPKH);
                            totalSize += 64 * inputsP2TR + 104 * inputsP2WPKH;
                            vbyteSize = 96 + Math.ceil((3 * baseSize + totalSize) / 4);
                            fee = vbyteSize * feeRate;

                            // peerswap spends dust change as extra fee
                            change = {{.BitcoinBalance}} - swapAmount - fee;
                            if (change < 1000) {
                              fee += change;
                            }
                          } else {
                            // Check amount
                            const maxAmount = {{.LiquidBalance}} - {{.ReserveLBTC}};
                            if (swapAmount > maxAmount) {
                              document.getElementById('result').innerText = "Swap-in amount cannot exceed " + formatWithThousandSeparators(maxAmount);
                              return;
                            }

                            // Initialize total UTXO amount and UTXO counters
                            let totalUtxoAmount = 0;
                            let inputs = 0; // Number of inputs
                            
                            // Get all table rows and convert NodeList to an array
                            let tableArray = Array.from(document.querySelectorAll("#utxoTableLBTC tr"));  

                            // Sort the array of table rows based on UTXO amount from high to low
                            tableArray.sort((a, b) => {
                                let amountA = parseFloat(a.querySelector("#utxoAmountLBTC").textContent);
                                let amountB = parseFloat(b.querySelector("#utxoAmountLBTC").textContent);
                                return amountB - amountA;
                            });

                            // total amount to allocate among UTXOs 
                            let amountToAllocate = swapAmount;
                            
                            // Iterate through table rows
                            tableArray.forEach(function(row) {
                              // Check if allocation is not finished
                              if (amountToAllocate >= 0) {
                                  // Reduce unallocated amount by UTXO size
                                  const utxoAmount = parseFloat(row.querySelector("#utxoAmountLBTC").textContent)*100000000;
                                  amountToAllocate -= utxoAmount;

                                  // increment inputs
                                  inputs++;
                                  title += "#" + formatWithThousandSeparators(inputs) + ": " + formatWithThousandSeparators(utxoAmount) + "\n";
                              }
                            });

                            // Calculate tx size assuming always two outputs
                            vbyteSize = 2503 + (inputs-1) * 84;
                            fee = vbyteSize * feeRate;

                            // peerswap spends dust change as extra fee
                            change = {{.LiquidBalance}} - swapAmount - fee;

                            if (change < 1000) {
                              // one output
                              vbyteSize -= 1,191;
                              // but the fee increases
                              fee += change;
                            }
                          } 
                        } else {
                          if (asset == "btc") {
                            vbyteSize = 350; // onchain.EstimatedOpeningTxSize
                            title = "Assumed opening transaction size 350 vB";
                          } else {
                            vbyteSize = 3000; // prepaid
                            title = "Assumed opening transaction size 3000 vB";
                          }
                          fee = vbyteSize * feeRate;
                        } 

                        let text = "Transaction size: " + vbyteSize + " vBytes\n";
                        text += "Estimated fee: " + formatWithThousandSeparators(fee) + " sats\n";
                        text += "Estimated PPM: " + formatWithThousandSeparators(Math.round(fee * 1000000 / swapAmount));
                        
                        if (asset == "btc" && change < 25000) {
                          text += "\nWARNING: No reserve is left for anchor fee bumping!";
                        } 

                        document.getElementById('result').title = title;
                        document.getElementById('resultLabel').title = title;
                        document.getElementById('result').innerText = text;
                      }

                      let timerId;
                      // Function to execute after a delay
                      function delayedCalculateTransactionFee() {
                          // Clear previous timer if it exists
                          clearTimeout(timerId);

                          // Set a new timer to execute after 300 milliseconds
                          timerId = setTimeout(calculateTransactionFee, 300);
                      }
                    </script>
                  {{end}}
                {{end}}
              {{end}}
            {{else}}
              <h4 class="title is-4">Invitation to PeerSwap</h4> 
              <form action="/submit" method="post">
                <div class="field is-horizontal">
                  <div class="field-body">
                    <div class="field">
                      <textarea name="keysendMessage" class="textarea" rows="13">
Hello {{.PeerAlias}}! 

It's great to have you as a peer! I've been rebalancing my channels with Liquid PeerSwap for a while and really enjoy it. Currently, it costs about 300 sats for any swap amount, and it will be even cheaper when Liquid implements a 10x discount for confidential transactions.

PeerSwap is available for CLN and LND, and comes with an excellent Web UI. Check it out at https://github.com/Impa10r/peerswap-web and give it a try.

Feel free to ping me if you have any questions.

Sincerely,
{{.MyAlias}}</textarea>
                    </div>
                  </div>
                </div>
                <div class="field is-horizontal">
                  <div class="field-label is-normal">
                    <label class="label">Keysend Sats</label>
                  </div>
                  <div class="field-body">
                    <div class="field">
                      <p>
                        <input class="input is-medium" type="number" name="keysendAmount" required min="1" value= "{{.KeysendSats}}" placeholder="‚ö° Keysend Amount (sats)">
                      </p>
                    </div>
                  </div>
                </div> 
                <br>
                <center>
                  <input type="hidden" name="action" value="keySend">
                  <input type="hidden" name="nodeId" value="{{.Peer.NodeId}}">
                  <input class="button is-large" type="submit" value="Send Message">
                </center>
              </form>
            {{end}}
          </div>
        </div>
        <div class="column">
          <div class="box">
            <div style="display: grid; grid-template-columns: auto auto; padding-bottom: 0.5em;">
              <div style="text-align: left;">
                <h4 class="title is-4"><a href="{{.NodeUrl}}/{{.Peer.NodeId}}" target="_blank">{{.PeerAlias}}</a></h4>  
              </div>
              <div style="display: flex; justify-content: flex-end;">
                {{if .PeerSwapPeer}}
                  <h4><a title="Display successful swaps with this peer" href="/?id={{.Peer.NodeId}}&state=success">üîç</a></h4>
                {{end}}
              </div>
            </div>
            {{if .PeerSwapPeer}}
              <table style="width:100%; table-layout:fixed; margin-bottom:0.5em;">
                <tr>
                  <th style="text-align: center">Swaps</th>
                  <th style="text-align: center">‚á® ‚ö°</th>
                  <th style="text-align: center">Cost</th>   
                  <th style="text-align: center">‚ö° ‚á®</th>
                  <th style="text-align: center">Cost</th>
                </tr>
                <tr style="border: 1px dotted">
                  <td style="text-align: center">Sent
                  <td title="Initiated {{fmt .Peer.AsSender.SwapsIn}} swap-ins for {{fmt .Peer.AsSender.SatsIn}} sats total" style="text-align: center">{{m .Peer.AsSender.SatsIn}}</td>
                  <td title="Opening fees paid, Sats (PPM)" style="text-align: center">{{fs .SenderInFee}}{{if .SenderInFee}} ({{fs .SenderInFeePPM}}){{end}}</td>
                  <td title="Initiated {{fmt .Peer.AsSender.SwapsOut}} swap-outs for {{fmt .Peer.AsSender.SatsOut}} sats total" style="text-align: center">{{m .Peer.AsSender.SatsOut}}</td>
                  <td title="Rebated paid to peer, Sats (PPM)" style="text-align: center">{{fmt .Peer.PaidFee}}{{if .Peer.PaidFee}} ({{fs .SenderOutFeePPM}}){{end}}</td>
                </tr>
                <tr style="border: 1px dotted">
                  <td style="text-align: center">Rcvd
                  <td title="Received {{fmt .Peer.AsReceiver.SwapsOut}} swap-outs for {{fmt .Peer.AsReceiver.SatsOut}} sats total" style="text-align: center">{{m .Peer.AsReceiver.SatsOut}}</td>
                  <td title="Opening fees less rebates, Sats (PPM)" style="text-align: center">{{fs .ReceiverOutFee}}{{if .ReceiverOutFee}} ({{fs .ReceiverOutFeePPM}}){{end}}</td>
                  <td title="Received {{fmt .Peer.AsReceiver.SwapsIn}} swap-ins for {{fmt .Peer.AsReceiver.SatsIn}} sats total" style="text-align: center">{{m .Peer.AsReceiver.SatsIn}}</td>
                  <td title="Claim fees paid, Sats (PPM)" style="text-align: center">{{fs .ReceiverInFee}}{{if .ReceiverInFee}} ({{fs .ReceiverInFeePPM}}){{end}}</td>
                </tr>
              </table>  
            {{end}}
            <table style="width:100%; table-layout:fixed; margin-bottom:0.5em;">
              <tr>
                <th style="text-align: center">Forwards</th>
                <th title="Sats routed out" style="text-align: center">Out</th>
                <th title="Routing revenue in Sats and (PPM)" style="text-align: center">Revenue</th>
                <th title="Sats routed in" style="text-align: center">In</th>
                <th title="Assisted revenue in Sats and (PPM)" style="text-align: center">Assisted</th>
              </tr>
              {{range .Stats}}
                <tr style="border: 1px dotted">
                  <td style="text-align: center">7d
                  <td title="{{fmt .AmountOut7d}}" style="text-align: center">{{m .AmountOut7d}}</td>
                  <td style="text-align: center"><span title="Sats">{{fmt .FeeSat7d}}</span>{{if gt .FeeSat7d 0}} <span title="PPM">({{fmt .FeePPM7d}})</span>{{end}}</td>
                  <td title="{{fmt .AmountIn7d}}" style="text-align: center">{{m .AmountIn7d}}</td>
                  <td style="text-align: center"><span title="Sats">{{fmt .AssistedFeeSat7d}}</span>{{if gt .AssistedFeeSat7d 0}} <span title="PPM">({{fmt .AssistedPPM7d}})</span>{{end}}</td>
                </tr>
                <tr style="border: 1px dotted">
                  <td style="text-align: center">30d
                  <td title="{{fmt .AmountOut30d}}" style="text-align: center">{{m .AmountOut30d}}</td>
                  <td style="text-align: center"><span title="Sats">{{fmt .FeeSat30d}}</span>{{if gt .FeeSat30d 0}} <span title="PPM">({{fmt .FeePPM30d}})</span>{{end}}</td>
                  <td title="{{fmt .AmountIn30d}}" style="text-align: center">{{m .AmountIn30d}}</td>
                  <td style="text-align: center"><span title="Sats">{{fmt .AssistedFeeSat30d}}</span>{{if gt .AssistedFeeSat30d 0}} <span title="PPM">({{fmt .AssistedPPM30d}})</span>{{end}}</td>
                </tr>
                <tr style="border: 1px dotted">
                  <td style="text-align: center">6m
                  <td title="{{fmt .AmountOut6m}}" style="text-align: center">{{m .AmountOut6m}}</td>
                  <td style="text-align: center"><span title="Sats">{{fmt .FeeSat6m}}</span>{{if gt .FeeSat6m 0}} <span title="PPM">({{fmt .FeePPM6m}})</span>{{end}}</td>
                  <td title="{{fmt .AmountIn6m}}" style="text-align: center">{{m .AmountIn6m}}</td>
                  <td style="text-align: center"><span title="Sats">{{fmt .AssistedFeeSat6m}}</span>{{if gt .AssistedFeeSat6m 0}} <span title="PPM">({{fmt .AssistedPPM6m}})</span>{{end}}</td>
                </tr>
              {{end}}
            </table>  
            <table style="width:100%; table-layout:fixed; margin-bottom:1em;">
              <tr>
                <th title="Channel Outbound Capacity" style="text-align: center">Local</th>
                <th title="Channel Inbound Capacity" style="text-align: center">Remote</th>
                <th title="Outbound Rate PPM" style="text-align: center">FeeRate</th>
                <th title="Outbound Base mSats" style="text-align: center">FeeBase</th>
              </tr>
              {{range .ChannelInfo}}
                <tr style="border: 1px dotted">
                  <td title="{{fmt .LocalBalance}}" style="text-align: center">{{m .LocalBalance}}</td>
                  <td title="{{fmt .RemoteBalance}}" style="text-align: center">{{m .RemoteBalance}}</td>
                  {{if .Active}}
                    <td style="text-align: center">{{fmt .FeeRate}}</td>
                    <td style="text-align: center">{{fmt .FeeBase}}</td>
                  {{else}}
                    <td style="text-align: right">CHANNEL</td>
                    <td style="text-align: left">INACTIVE</td>
                  {{end}}
                </tr>
              {{end}}
            </table>
            {{if .PeerSwapPeer}}
              <div class="columns">
                <div class="column">
                  <center>            
                    {{if .Suspicious}}
                      <p style="margin-bottom:0.5em;">üïµ This peer is suspicious</p>
                      <form action="/submit" method="post">
                        <input type="hidden" name="action" value="unsuspectPeer">
                        <input type="hidden" name="nodeId" value="{{.Peer.NodeId}}">
                        <input class="button is-large" type="submit" value="Unsuspect This Peer">
                      </form>
                    {{else}}
                      <p style="margin-bottom:0.5em;">‚úÖ This peer is not suspicious</p>
                      <form action="/submit" method="post">
                        <input type="hidden" name="action" value="suspectPeer">
                        <input type="hidden" name="nodeId" value="{{.Peer.NodeId}}">
                        <input class="button is-large" type="submit" value="Suspect This Peer">
                      </form>
                    {{end}}
                  </center>
                </div>
                <div class="column">
                  <center>
                    {{if .Allowed}}
                      <p style="margin-bottom:0.5em;">‚úÖ This peer is whitelisted</p>
                      <form action="/submit" method="post">
                        <input type="hidden" name="action" value="removePeer">
                        <input type="hidden" name="nodeId" value="{{.Peer.NodeId}}">
                        <input class="button is-large" type="submit" value="Blacklist This Peer">
                      </form>
                    {{else}}
                      <p style="margin-bottom:0.5em;">‚õî This peer is blacklisted</p>
                      <form action="/submit" method="post">
                        <input type="hidden" name="action" value="addPeer">
                        <input type="hidden" name="nodeId" value="{{.Peer.NodeId}}">
                        <input class="button is-large" type="submit" value="Whitelist This Peer">
                      </form>
                    {{end}}
                  </center>
                </div>
              </div>
            {{end}}
          </div>
        </div>
      </div>
    </div>
  {{template "footer" .}}
{{end}}
