// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RequestedSwapSwapType requested swap swap type
//
// swagger:model RequestedSwapSwapType
type RequestedSwapSwapType string

func NewRequestedSwapSwapType(value RequestedSwapSwapType) *RequestedSwapSwapType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated RequestedSwapSwapType.
func (m RequestedSwapSwapType) Pointer() *RequestedSwapSwapType {
	return &m
}

const (

	// RequestedSwapSwapTypeSWAPIN captures enum value "SWAP_IN"
	RequestedSwapSwapTypeSWAPIN RequestedSwapSwapType = "SWAP_IN"

	// RequestedSwapSwapTypeSWAPOUT captures enum value "SWAP_OUT"
	RequestedSwapSwapTypeSWAPOUT RequestedSwapSwapType = "SWAP_OUT"
)

// for schema
var requestedSwapSwapTypeEnum []interface{}

func init() {
	var res []RequestedSwapSwapType
	if err := json.Unmarshal([]byte(`["SWAP_IN","SWAP_OUT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		requestedSwapSwapTypeEnum = append(requestedSwapSwapTypeEnum, v)
	}
}

func (m RequestedSwapSwapType) validateRequestedSwapSwapTypeEnum(path, location string, value RequestedSwapSwapType) error {
	if err := validate.EnumCase(path, location, value, requestedSwapSwapTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this requested swap swap type
func (m RequestedSwapSwapType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRequestedSwapSwapTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this requested swap swap type based on context it is used
func (m RequestedSwapSwapType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
